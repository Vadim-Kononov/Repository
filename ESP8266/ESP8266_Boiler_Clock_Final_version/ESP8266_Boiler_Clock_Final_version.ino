/*
  –í—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π —Å–≤–µ—Ç–æ–¥–∏–æ–¥ –ø–æ–¥–ª–∫—é—á—ë–Ω –∫ D4 (GPIO2) –ø–∏–Ω—É –≤—ã—Å–æ–∫–∏–π —É—Ä–æ–≤–µ–Ω—å –≥–∞—Å–∏—Ç —Å–≤–µ—Ç–æ–¥–∏–æ–¥
  –î–∞—Ç—á–∏–∫ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã ds18b20 –∫ D5 (GPIO14) –ø–∏–Ω—É
  –†–µ–ª–µ –∫ D3 (GPIO0) –ø–∏–Ω—É
  –¢–µ—Ä–º–æ–ø–∞—Ä–∞ –∫ :
  SCK –∫ D6 GPIO(12) –ø–∏–Ω—É
  CS  –∫ D7 GPIO(13) –ø–∏–Ω—É
  SO  –∫ D8 GPIO(15) –ø–∏–Ω—É
  Servo –∫ :
  –°–∏–≥–Ω–∞–ª –∫ D2 GPIO(4) –ø–∏–Ω—É
  –ü–∏—Ç–∞–Ω–∏–µ –∫ D1 GPIO(5) –ø–∏–Ω—É
  RGB —Å–≤–µ—Ç–æ–¥–∏–æ–¥ –∫:
  R –∫ D4 GPIO(2) –ø–∏–Ω—É
  G –∫ D0 GPIO(16) –ø–∏–Ω—É
  B –∫ D10 GPIO(1) –ø–∏–Ω—É

  –ú–æ–¥—É–ª—å –ù–°12 –ø–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è –∫ Serial: RX –ù–°12 –∫ TX (GPIO1)(D10) –ø–ª–∞—Ç—ã, TX –ù–°12 –∫ RX (GPIO1)(D9) –ø–ª–∞—Ç—ã, –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–∫–µ—Ç—á–∞ - –æ—Ç–∫–ª—é—á–∞—Ç—å.
                         –∫ Serial1:RX –ù–°12 –∫ D4 (GPIO2) –ø–ª–∞—Ç—ã.
  D0   GPIO(16)   GLed
  D1   GPIO(5)    servoVcc
  D2   GPIO(4)    servoPin
  D3   GPIO(0)    WhatchDog_pin
  D4   GPIO(2)
  D5   GPIO(14)   ds18b20
  D6   GPIO(12)   thermocoupleSCK
  D7   GPIO(13)   thermocoupleCS
  D8   GPIO(15)   thermocoupleSO
  D9   GPIO(3)
  D10  GPIO(1)

  Servo –∫—Ä–∞—Å–Ω—ã–π +7,5–í, —á–µ—Ä–Ω—ã–π -7,5–í, –±–µ–ª—ã–π —Å–∏–≥–Ω–∞–ª.
*/
#define BUFFER_SIZE 100

#include <ESP8266WiFi.h>                                      // WiFi –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
#include <ESP8266mDNS.h>                                      //
#include <WiFiUdp.h>                                          //
#include <WiFiClientSecure.h>                                 //
#include <ArduinoOTA.h>                                       // –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å–∫–µ—Ç—á–∞ "–ø–æ –≤–æ–∑–¥—É—Ö—É"

#include "Account.h"

WiFiClientSecure IFTTclient;                                  // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–ª—è IFTT
IFTTTMaker ifttt(KEY, IFTTclient);                            // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–ª—è IFTT

#include <PubSubClient.h>                                     // MQTT –±–∏–±–ª–∏–æ—Ç–µ–∫–∞

WiFiClient MQTTclient;                                        // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–ª—è MQTT
PubSubClient client(MQTTclient, mqtt_server, mqtt_port);      // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–ª—è MQTT

#include <OneWire.h>                                          // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–ª—è DS18B20, —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤–æ–¥—ã –≤ –∫–æ—Ç–ª–µ
#include <DallasTemperature.h>                                // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–ª—è DS18B20
#define ds18b20 14                                            // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–ª—è DS18B20  
OneWire oneWire(ds18b20);                                     // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–ª—è DS18B20
DallasTemperature thermode(&oneWire);                         // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–ª—è DS18B20

#include "max6675.h"                                                    // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–ª—è —Ç–µ—Ä–º–æ–ø–∞—Ä—ã, —Ç–µ–ø–µ—Ä–∞—Ç—É—Ä–∞ –æ—Ç—Ö–æ–¥—è—â–∏—Ö –≥–∞–∑–æ–≤
#define thermocoupleSO 15                                               // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–ª—è —Ç–µ—Ä–º–æ–ø–∞—Ä—ã
#define thermocoupleCS 13                                               // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–ª—è —Ç–µ—Ä–º–æ–ø–∞—Ä—ã
#define thermocoupleSCK 12                                              // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–ª—è —Ç–µ—Ä–º–æ–ø–∞—Ä—ã
MAX6675 thermocouple(thermocoupleSCK, thermocoupleCS, thermocoupleSO);  // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–ª—è —Ç–µ—Ä–º–æ–ø–∞—Ä—ã

#include <Servo.h>                                                      // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–ª—è —Å–µ—Ä–≤–æ–ø—Ä–∏–≤–æ–¥–∞
#define servoPin 4                                                      // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–ª—è —Å–µ—Ä–≤–æ–ø—Ä–∏–≤–æ–¥–∞
#define servoVcc 5                                                      // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–ª—è —Å–µ—Ä–≤–æ–ø—Ä–∏–≤–æ–¥–∞
Servo myServo;                                                          // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–ª—è —Å–µ—Ä–≤–æ–ø—Ä–∏–≤–æ–¥–∞
#define WhatchDog_pin 0                                                 // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–ª—è –ø–∏–Ω–∞ –≤—ã—Ö–æ–¥–∞ –Ω–∞ WhatchDog
#define GLed 16                                                         // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–ª—è RGB —Å–≤–µ—Ç–æ–¥–∏–æ–¥–∞

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
// –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤ –∫–æ–º–Ω–∞—Ç–µ, –µ–µ —Å—Ç–∞—Ä–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ, –∑–∞–¥–∞–Ω–Ω–∞—è, —Ä–∞–∑–Ω–∏—Ü–∞ —Å –∑–∞–¥–∞–Ω–Ω–æ–π, –ø—Ä–æ–≥–Ω–æ–∑ —Ä–∞–∑–Ω–∏—Ü—ã, –∫—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑, —Å–∫–æ—Ä–æ—Å—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è, –ø—Ä–æ–≥–Ω–æ–∑ –∑–∞ —Ü–∏–∫–ª —Ä–µ–≥—É–ª–∏—Ä–æ–≤–∞–Ω–∏—è, –≤–æ–¥—ã –≤ –∫–æ—Ç–ª–µ, –æ—Ç—Ö–æ–¥—è—â–∏—Ö –≥–∞–∑–æ–≤, –ø–æ–ª–æ–∂–µ–Ω–∏–µ —Å–µ—Ä–≤–æ –≤ –≤–∏–¥–µ –¥–µ—Å—è—Ç–∏—á–Ω–æ–≥–æ —á–∏—Å–ª–∞
float tem_room, tem_room_old, tem_zad, tem_dif, tem_big_trend, tem_small_trend, tem_boiler, tem_pipe, return_position_Sit630, prognos;
// –°—á–µ—Ç—á–∏–∫ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π, –ø–µ—Ä–∏–æ–¥–∞ —Ä–µ–≥—É–ª–∏—Ä–æ–≤–∫–∏, –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤—Ä–∞—â–µ–Ω–∏—è Sit630, –∫—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω–æ–≥–æ –∏–∑–º–µ—Ä–µ–Ω–∏—è –∏ –¥—Ä.
long  count_ms_Send, count_ms_Control, count_ms_Rotation , count_ms_Check, count_ms_scan_Room;
// –§–ª–∞–≥ –∑–∞–ø–∏—Å–∏ —Å—Ç–∞—Ä–æ–π —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã, –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è whatchDog
boolean tem_room_old_flag, change_clock_flag, whatchDog_flag;
// –°–∏–º–≤–æ–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤—Ä–∞—â–µ–Ω–∏—è Sit630 –∏ –¥—Ä.
String control_string, rotation_string, situation_string;
// –ü–æ–ª–æ–∂–µ–Ω–∏–µ Sit630, —Å—Ç–∞—Ä–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ, –∏–∑–º–µ–Ω–µ–Ω–∏–µ –ø–æ–ª–æ–∂–µ–Ω–∏—è, —Ä–µ–∂–∏–º —Ä–µ–≥—É–ª—è—Ç–æ—Ä–∞, –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π, –∫—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω–æ–≥–æ –∏–∑–º–µ—Ä–µ–Ω–∏—è, —Ä–µ–≥—É–ª–∏—Ä–æ–≤–∫–∏ –∏ –¥—Ä.
int rotation, rotation_old, rotation_dif, regulator_mode, time_sec_Send, time_min_Check, time_min_Control, time_min_scan_Room, minutes_in_Day;

#include <EEPROM.h>                                                     // –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å EEPROM

// –ü—Ä–æ—Ü–µ–¥—É—Ä–∞ SETUP
void setup()
{
  Serial.begin(9600);                                                   // –°–∫–æ—Ä–æ—Å—Ç—å —Ä–∞–±–æ—Ç—ã –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–≥–æ –ø–æ—Ä—Ç–∞
  WiFi.mode(WIFI_STA);                                                  // –†–µ–∂–∏–º WiFi —Ç–æ–ª—å–∫–æ STA
  WiFi.begin(ssid, pass);                                               // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ WiFi
  while (WiFi.waitForConnectResult() != WL_CONNECTED) {delay(50);}      // –û–∂–∏–¥–∞–Ω–∏–µ WiFi 
  WiFi.hostname("NodeMCU_Boiler");
  ArduinoOTA.setHostname("NodeMCU_Boiler");                             // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∏–º–µ–Ω–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –≤ —Å–µ—Ç–∏
  ArduinoOTA.begin();                                                   // –ó–∞–ø—É—Å–∫ –ø–æ–¥–ø—Ä–æ–≥—Ä–∞–º–º—ã –∑–∞–≥—Ä—É–∑–∫–∏ —Å–∫–µ—Ç—á–∞ "–ø–æ –≤–æ–∑–¥—É—Ö—É"

  EEPROM.begin(512);                                      // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–∞ —á—Ç–µ–Ω–∏—è –∏–∑ EEPROM
  EEPROM.get(0, rotation_old);                            // –ü–µ—Ä–µ–Ω–æ—Å –∏–∑ EEPROM –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –¥–æ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª–æ–∂–µ–Ω–∏—è —Å–µ—Ä–≤–æ–ø—Ä–∏–≤–æ–¥–∞
  EEPROM.commit();                                        // –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã —Å EEPROM
  EEPROM.end();                                           // –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã —Å EEPROM

  myServo.attach(servoPin);                               // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–∏–Ω–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–µ—Ä–≤–æ–ø—Ä–∏–≤–æ–¥–∞
  pinMode(servoVcc, OUTPUT);                              // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–∏–Ω–∞ –ø–∏—Ç–∞–Ω–∏—è —Å–µ—Ä–≤–æ–ø—Ä–∏–≤–æ–¥–∞
  digitalWrite(servoVcc, LOW);                            // –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –ø–∏—Ç–∞–Ω–∏—è —Å–µ—Ä–≤–æ–ø—Ä–∏–≤–æ–¥–∞

  pinMode(GLed, OUTPUT);                                  // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–∏–Ω–∞ –∑–µ–ª–µ–Ω–æ–≥–æ —Å–≤–µ—Ç–æ–¥–∏–æ–¥–∞
  pinMode(WhatchDog_pin, OUTPUT);                         // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–∏–Ω–∞ –≤—ã—Ö–æ–¥–∞ —Å–∏–≥–Ω–∞–ª–∞ –Ω–∞ WhatchDog

  thermode.begin();                                       // –ó–∞–ø—É—Å–∫ —Ç–µ—Ä–º–æ–ø–∞—Ä—ã

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
  change_clock_flag = false;                              // –ò–∑–º–µ–Ω–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –Ω–µ—Ç
  tem_room_old_flag = true;                               // –°—Ç–∞—Ä–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –Ω–µ—Ç

  regulator_mode = 1;                                     // –†–µ–∂–∏–º —Ä–µ–≥—É–ª—è—Ç–æ—Ä–∞ —Ä—É—á–Ω–æ–π
  control_string = " üåÄ";                                 // –°—Ç—Ä–æ–∫–∞ –¥–ª—è IFTTT —Å–æ–æ–±—â–µ–Ω–∏—è
  situation_string = " üåÄ ";                              // –°—Ç—Ä–æ–∫–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –ø–∞–Ω–µ–ª—å
  
  minutes_in_Day = 0;                                     // –ü–æ–ª–Ω–æ—á—å
  time_sec_Send = 2;                                      // –í—Ä–µ–º—è —Ü–∏–∫–ª–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π 2 –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
  time_min_Check = 10;                                    // –í—Ä–µ–º—è —Ü–∏–∫–ª–∞ –∫—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω—ã—Ö –∏–∑–º–µ—Ä–µ–Ω–∏–π –≤ –º–∏–Ω—É—Ç–∞—Ö
  time_min_Control = 30;                                  // –í—Ä–µ–º—è —Ü–∏–∫–ª–∞ —Ä–µ–≥—É–ª–∏—Ä–æ–≤–∫–∏ –∫–æ—Ç–ª–∞ –≤ –º–∏–Ω—É—Ç–∞—Ö
  time_min_scan_Room = 60;                                // –í—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –º–æ–¥—É–ª—è Room –≤ –º–∏–Ω—É—Ç–∞—Ö
  
  count_ms_Check = millis();                              // —Å—á–µ—Ç—á–∏–∫ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã
  count_ms_Control    = count_ms_Check;                   // —Å—á–µ—Ç—á–∏–∫ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥ —Ä–µ–≥—É–ª–∏—Ä–æ–≤–∫–∏ –∫–æ—Ç–ª–∞
  count_ms_Send       = count_ms_Check;                   // —Å—á–µ—Ç—á–∏–∫ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
  count_ms_Rotation   = count_ms_Check;                   // —Å—á–µ—Ç—á–∏–∫ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥ –º–µ–∂–¥—É –≤—Ä–∞—â–µ–Ω–∏—è–º–∏
  count_ms_scan_Room  = count_ms_Check;                   // —Å—á–µ—Ç—á–∏–∫ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥ –ø—Ä–æ–≤–µ—Ä–∫–∏ –º–æ–¥—É–ª—è Room

  delay (500);

  ifttt.triggerEvent(EVENT_NAME_1, "–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω:\n" + ESP.getResetReason());// –û—Ç–ø—Ä–∞–≤–∫–∞ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ IFTT –æ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–µ –º–æ–¥—É–ª—è
}



// –ü—Ä–æ—Ü–µ–¥—É—Ä–∞ LOOP
void loop()
{
  whatchDog_flag = true; digitalWrite (WhatchDog_pin, whatchDog_flag); delay (50);    // –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–∏–Ω–∞ WhatchDog

  ArduinoOTA.handle();                                                                // –ü—Ä–æ—Ü–µ–¥—É—Ä–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–∫–µ—Ç—á–∞ –ø–æ WiFi
  if (WiFi.status() != WL_CONNECTED)
  {
    WiFi.begin(ssid, pass);
    if (WiFi.waitForConnectResult() != WL_CONNECTED) {return;}
    WiFi.hostname("NodeMCU_Boiler");
  }
                                                                                      
  if (WiFi.status() == WL_CONNECTED)                                                  // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MQTT —Å–µ—Ä–≤–µ—Ä—É
  { 
    delay (50);
    if (!client.connected())
    {
      if (client.connect(MQTT::Connect("Mqtt_Boiler").set_auth(mqtt_user, mqtt_pass)))
      {
      client.set_callback(reception);                                                // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ–¥—É—Ä—ã —á—Ç–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
      
      client.subscribe("rotation");                                                  // –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –ø–æ–ª–æ–∂–µ–Ω–∏–µ Sit630
      client.subscribe("panel/mode");                                                // –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã —Ä–µ–≥—É–ª—è—Ç–æ—Ä–∞ 0 - —Ä—É—á–Ω–æ–π, 1 - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π
      client.subscribe("panel/time_control");                                        // –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –≤—Ä–µ–º—è —Ü–∏–∫–ª–∞ —Ä–∞–±–æ—Ç—ã —Ä–µ–≥—É–ª—è—Ç–æ—Ä–∞
      client.subscribe("panel/time_check");                                          // –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –≤—Ä–µ–º—è —Ü–∏–∫–ª–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è —Ç—Ä–µ–Ω–¥–∞
      client.subscribe("room/tem");                                                  // –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É –≤ –∫–æ–º–Ω–∞—Ç–µ
      client.subscribe("room/zad");                                                  // –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∑–∞–¥–∞–Ω–Ω—É—é —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É
      client.subscribe("room/dif");                                                  // –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Ä–∞–∑–Ω–æ—Å—Ç—å —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã –≤ –∫–æ–º–Ω–∞—Ç–µ –∏ –∑–∞–¥–∞–Ω–Ω–æ–π
      client.subscribe("room/minutes_in_day");                                       // –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –º–∏–Ω—É—Ç—ã –≤ —Å—É—Ç–∫–∞—Ö
      }
    }
    if (client.connected())                                                          // –ï—Å–ª–∏ –µ—Å—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ WiFi –∏ –∫ Mqtt —Å–µ—Ä–≤–µ—Ä—É
    {
      client.loop();

      if (change_clock_flag)                                                      // –ï—Å–ª–∏ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å –≤—Ä–µ–º—è
      {
      change_clock_flag = false;                                                  // –°–±—Ä–æ—Å —Ñ–ª–∞–≥–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏
      count_ms_scan_Room = millis();                                              // –°–±—Ä–æ—Å —Å—á–µ—Ç—á–∏–∫–∞ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥ –∫–æ–Ω—Ç—Ä–æ–ª—è –º–æ–¥—É–ª—è Room
          
          if (minutes_in_Day % time_min_Check == 0)                               // –ï—Å–ª–∏ –ø—Ä–∏—à–ª–æ –≤—Ä–µ–º—è –∫–æ—Ä–æ—Ç–∫–æ–≥–æ –∏–∑–º–µ—Ä–µ–Ω–∏—è
          {
          count_ms_Check = millis();                                              // –û–±–Ω—É–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥ –∫–æ—Ä–æ—Ç–∫–æ–≥–æ –∏–∑–º–µ—Ä–µ–Ω–∏—è
          tem_small_trend = tem_room - tem_room_old;                              // –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –º–∞–ª–æ–≥–æ —Ç—Ä–µ–Ω–¥–∞
          tem_room_old = tem_room;                                                // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã –≤ –∫–æ—Ä–æ—Ç–∫–æ–º —Ü–∏–∫–ª–µ                                                                  
          tem_big_trend = tem_small_trend * time_min_Control / time_min_Check;    // –í—ã—á–∏—Å–ª–µ–Ω–∏–µ —Ç—Ä–µ–Ω–¥–∞ –∑–∞ —Ü–∏–∫–ª —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è           
          if (Situation () == 0) situation_string = " üîµ "; else situation_string = " üî¥ "; // –°–∏–º–≤–æ–ª –≤ –ø–∞–Ω–µ–ª—å
                                           
              if (minutes_in_Day % time_min_Control == 0)                                  // –ï—Å–ª–∏ –ø–æ–¥–æ—à–ª–æ –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã —Ä–µ–≥—É–ª—è—Ç–æ—Ä–∞ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã
              {       
              count_ms_Control = count_ms_Check;                                           // –û–±–Ω—É–ª–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥ —Ü–∏–∫–ª–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
                
                if ((regulator_mode==1) || (regulator_mode==2))                                                     // –ï—Å–ª–∏ —Ä–µ–∂–∏–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π
                {
                    if      (Situation () < 0)                                             // –ï—Å–ª–∏ —Å–∏—Ç—É–∞—Ü–∏—è —Ç—Ä–µ–±—É–µ—Ç —É–º–µ–Ω—å—à–µ–Ω–∏—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã –∫–æ—Ç–ª–∞
                  {
                    if (rotation >= 5) {rotation = rotation - 4;  control_string = " üîª -1";}    // –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–æ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏ –∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è IFTT —Å–æ–æ–±—â–µ–Ω–∏—è
                    else control_string = " ‚ûñ";                                                 // –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è IFTT —Å–æ–æ–±—â–µ–Ω–∏—è –æ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–æ–º –ø—Ä–µ–¥–µ–ª–µ
                    client.publish(MQTT::Publish("rotation", String(rotation)).set_retain());    // –í—ã–∑–æ–≤ –ø–æ–¥–ø—Ä–æ–≥—Ä–∞–º–º—ã –ø–æ–≤–æ—Ä–æ—Ç–∞ —á–µ—Ä–µ–∑ –ø—É–±–ª–∏–∫–∞—Ü–∏—é   
                  }

                  else if  ((Situation () > 0))                                            // –ï—Å–ª–∏ —Å–∏—Ç—É–∞—Ü–∏—è —Ç—Ä–µ–±—É–µ—Ç —É–≤–µ–ª–∏—á–µ–Ω–∏—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã –∫–æ—Ç–ª–∞
                  {
                    if (rotation <= 17) {rotation = rotation + 4; control_string = " üî∫ +1";}     // –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏ –∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è IFTT —Å–æ–æ–±—â–µ–Ω–∏—è
                    else control_string = " ‚ûï";                                                  // –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è IFTT —Å–æ–æ–±—â–µ–Ω–∏—è –æ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–æ–º –ø—Ä–µ–¥–µ–ª–µ
                    client.publish(MQTT::Publish("rotation", String(rotation)).set_retain());     // –í—ã–∑–æ–≤ –ø–æ–¥–ø—Ä–æ–≥—Ä–∞–º–º—ã –ø–æ–≤–æ—Ä–æ—Ç–∞ —á–µ—Ä–µ–∑ –ø—É–±–ª–∏–∫–∞—Ü–∏—é   
                  }

                  else control_string = " üîµ";                                              // –ï—Å–ª–∏ —Å–∏—Ç—É–∞—Ü–∏—è –Ω–µ —Ç—Ä–µ–±—É–µ—Ç —Ä–µ–≥—É–ª–∏—Ä–æ–≤–∫–∏, —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è IFTT —Å–æ–æ–±—â–µ–Ω–∏—è                                                                  
                }
               }
          }  
      }  
      
    if (millis() - count_ms_scan_Room > 60000 * time_min_scan_Room)                                               // –ï—Å–ª–∏ –≤ —Ç–µ—á–µ–Ω–∏–∏ 60 –º–∏–Ω –≤—Ä–µ–º—è –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å
    {
    count_ms_scan_Room = millis();                                                                                // –°–±—Ä–æ—Å —Å—á–µ—Ç—á–∏–∫–∞ –∫–æ–Ω—Ç—Ä–æ–ª—è –º–æ–¥—É–ª—è Room
    ifttt.triggerEvent(EVENT_NAME_1, "–ú–æ–¥—É–ª—å Room –Ω–µ—Ç —Å–∏–≥–Ω–∞–ª–∞");                                                  // –û—Ç–ø—Ä–∞–≤–∫–∞ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ IFTT –æ –∑–∞–≤–∏—Å—à–µ–º –º–æ–¥—É–ª–µ Room
    }    
    Sending();                                                                                                    // –í—ã–∑–æ–≤ –ø–æ–¥–ø—Ä–æ–≥—Ä–∞–º–º—ã –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –∏–∑–º–µ—Ä–µ–Ω–∏–π –∫–∞–∂–¥—ã–µ 2 —Å–µ–∫—É–Ω–¥—ã
    }  
  }
 
  whatchDog_flag = false; digitalWrite (WhatchDog_pin, whatchDog_flag); delay (50);                               // –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–∏–Ω–∞ WhatchDog
}                               
// –ö–æ–Ω–µ—Ü –ø—Ä–æ—Ü–µ–¥—É—Ä—ã LOOP



// –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞
void reception(const MQTT::Publish& pub)
{
  String payload = pub.payload_string();

  if (String(pub.topic()) == "rotation")                // –ï—Å–ª–∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ –ø–æ–ª–æ–∂–µ–Ω–∏–µ Sit630
  {
    rotation =  payload.toInt(); Position (rotation);   // –í—ã–∑–æ–≤ –ø–æ–≤–æ—Ä–æ—Ç–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
  }

  if (String(pub.topic()) == "panel/mode")              // –ï—Å–ª–∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã —Ä–µ–≥—É–ª—è—Ç–æ—Ä–∞
  {
    regulator_mode =  payload.toInt();
  }

  if (String(pub.topic()) == "panel/time_control")      // –ï—Å–ª–∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ –≤—Ä–µ–º—è —Ü–∏–∫–ª–∞ —Ä–µ–≥—É–ª—è—Ç–æ—Ä–∞
  {
    time_min_Control =  payload.toInt();                // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –µ–≥–æ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π   
  }

  if (String(pub.topic()) == "panel/time_check")        // –ï—Å–ª–∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ –≤—Ä–µ–º—è —Ü–∏–∫–ª–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è
  {
    time_min_Check =  payload.toInt();                  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –µ–≥–æ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π   
  }
  
  if (String(pub.topic()) == "room/tem")                // –ï—Å–ª–∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤ –∫–æ–º–Ω–∞—Ç–µ
  {
    char x[10];
    payload.toCharArray(x, payload.length() + 1);
    tem_room = atof(x);
    
    if (tem_room_old_flag)
    {                                                   // –°—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–¥–∏–Ω —Ä–∞–∑ –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏
      tem_room_old_flag = false;                        // 
      tem_room_old = tem_room;                          // –ü—Ä–∏—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç—Å—è —Å—Ç–∞—Ä–∞—è –∏ —Ç–µ–∫—É—â–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –æ–¥–∏–Ω —Ä–∞–∑ –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏
    }
  }

  if (String(pub.topic()) == "room/zad")                // –ï—Å–ª–∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞ –∑–∞–¥–∞–Ω–Ω–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤ –∫–æ–º–Ω–∞—Ç–µ
  {
    char x[10];
    payload.toCharArray(x, payload.length() + 1);
    tem_zad = atof(x);
  }

  if (String(pub.topic()) == "room/dif")                // –ï—Å–ª–∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞ —Ä–∞–∑–Ω–æ—Å—Ç—å —Ç–µ–∫—É—â–µ–π –∏ –∑–∞–¥–∞–Ω–Ω–æ–π —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä
  {
    char x[10];
    payload.toCharArray(x, payload.length() + 1);
    tem_dif = atof(x);
  }

  if (String(pub.topic()) == "room/minutes_in_day")     // –ï—Å–ª–∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω—ã –º–∏–Ω—É—Ç—ã –¥–Ω—è
  {
    if (payload.toInt() != minutes_in_Day)              // –ï—Å–ª–∏ –º–∏–Ω—É—Ç—ã –¥–Ω—è –∏–∑–º–µ–Ω–∏–ª–∏—Å—å
    {
      minutes_in_Day =  payload.toInt();                // –ò—Ö —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π                   
      change_clock_flag = true;                         // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ñ–ª–∞–≥–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏            
    }
  }
}



// –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö
void Sending()
{
  if (millis() - count_ms_Send > 1000 * time_sec_Send)                    // –ï—Å–ª–∏ –ø–æ–¥–æ–æ—à–ª–æ –≤—Ä–µ–º—è –ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∏—è (2 —Å–µ–∫.)
  {
    count_ms_Send = millis();                                             // –°–±—Ä–æ—Å —Å—á–µ—Ç—á–∏–∫–∞ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥
    digitalWrite(GLed, HIGH);                                             // –ó–∞–∂–∏–≥–∞–µ–º –∑–µ–ª–µ–Ω—ã–π —Å–≤–µ—Ç–æ–¥–∏–æ–¥

    thermode.requestTemperatures();                                       // –ó–∞–ø—É—Å–∫–∞–µ–º –∏–∑–º–µ—Ä–µ–Ω–µ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã –≤–æ–¥—ã –¥–∞—Ç—á–∏–∫–æ–º ds18b20
    tem_boiler = thermode.getTempCByIndex(0);                             // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã –æ—Ç –¥–∞—Ç—á–∏–∫–∞ ds18b20
    tem_pipe = thermocouple.readCelsius() - 1.0;                          // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É –æ—Ç—Ö–æ–¥—è—â–∏—Ö –≥–∞–∑–æ–≤ –æ—Ç —Ç–µ—Ä–º–æ–ø–∞—Ä—ã
    
    prognos = tem_room + tem_small_trend * (time_min_Control - minutes_in_Day % time_min_Control) / time_min_Check; // –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –ø—Ä–æ–≥–Ω–æ–∑–∞ –¥–æ –∫–æ–Ω—Ü–∞ —Ç–µ–∫—É—â–µ–≥–æ —Ü–∏–∫–ª–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        
    if (rotation_dif > 0) rotation_string = "+" + String(rotation_dif/4.0);               // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —à–∞–≥–∞ —Ä–µ–≥—É–ª—è—Ç–æ—Ä–∞
    else if (rotation_dif < 0) rotation_string = String(rotation_dif/4.0);
    else rotation_string = "";
        
    //„Äá‚õí‚ß≤‚éã‚ä†‚òí‚ùå‚óåüÑ¨‚ùÇüî∫üîªüåÄüîµüî¥                                                             // –ù–∞–±–æ—Ä –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º—ã—Ö –≤ —Ç–µ–ª–µ—Ñ–æ–Ω–µ —Å–∏–º–≤–æ–ª–æ–≤ –ø—Ä–æ –∑–∞–ø–∞—Å
    
    client.publish("boiler/tem", String(tem_boiler));                                     // –ü—É–±–ª–∏–∫–∞—Ü–∏—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã –≤–æ–¥—ã –≤ –∫–æ—Ç–ª–µ
    client.publish("boiler/pipe", String(tem_pipe));                                      // –ü—É–±–ª–∏–∫–∞—Ü–∏—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É –æ—Ç—Ö–æ–¥—è—â–∏—Ö –≥–∞–∑–æ–≤
    client.publish("boiler/trend", String(tem_big_trend));                                // –ü—É–±–ª–∏–∫–∞—Ü–∏—è –±–æ–ª—å—à–æ–≥–æ —Ç—Ä–µ–Ω–¥–∞
    client.publish("boiler/prognos", String(prognos));                                    // –ü—É–±–ª–∏–∫–∞—Ü–∏—è –ø—Ä–æ–≥–Ω–æ–∑–∞

    client.publish("boiler/elapsed_adj_ms", String(millis() - count_ms_Control));                               // –ü—É–±–ª–∏–∫–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–π —Ä–µ–≥—É–ª–∏—Ä–æ–≤–∫–∏ –¥–ª—è –¥–∏–∞–≥—Ä–∞–º–º—ã
    client.publish("boiler/remained_adj_ms", String(60000 * time_min_Control - (millis() - count_ms_Control))); // –ü—É–±–ª–∏–∫–∞—Ü–∏—è –æ—Å—Ç–∞–≤—à–µ–≥–æ—Å—è –≤—Ä–µ–º–µ–Ω–∏ –¥–æ —Å–ª–µ–¥—É—é—â–µ–π —Ä–µ–≥—É–ª–∏—Ä–æ–≤–∫–∏ –¥–ª—è –¥–∏–∞–≥—Ä–∞–º–º—ã
    
    client.publish("boiler/elapsed_check_ms", String(millis() - count_ms_Check));                               // –ü—É–±–ª–∏–∫–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∏–∑–º–µ—Ä–µ–Ω–∏—è –¥–ª—è –¥–∏–∞–≥—Ä–∞–º–º—ã
    client.publish("boiler/remained_check_ms", String(60000 * time_min_Check - (millis() - count_ms_Check)));   // –ü—É–±–ª–∏–∫–∞—Ü–∏—è –æ—Å—Ç–∞–≤—à–µ–≥–æ—Å—è –≤—Ä–µ–º–µ–Ω–∏ –¥–æ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∏–∑–º–µ—Ä–µ–Ω–∏—è –¥–ª—è –¥–∏–∞–≥—Ä–∞–º–º—ã
    
    client.publish("boiler/time_rotation", rotation_string + situation_string + Hour_display (millis() - count_ms_Rotation));      // –ü—É–±–ª–∏–∫–∞—Ü–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —à–∞–≥–∞ –∏ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤—Ä–∞—â–µ–Ω–∏—è
    client.publish("boiler/return_position_Sit630", String(return_position_Sit630));                            // –ü—É–±–ª–∏–∫–∞—Ü–∏—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª–æ–∂–µ–Ω–∏—è Sit630
        
    digitalWrite(GLed, LOW);                                                                                    // –ì–∞—Å–∏–º –∑–µ–ª–µ–Ω—ã–π —Å–≤–µ—Ç–æ–¥–∏–æ–¥
  }
  delay(50);                                                                                                    // –î–µ–ª–∞–µ–º –ø–∞—É–∑—É –¥–ª—è —Ä–∞–±–æ—Ç—ã WiFi ESP8266
}



// –§—É–Ω–∫—Ü–∏—è –ø–æ–≤–æ—Ä–æ—Ç–∞ Servo
void Position (int state)
{
  // –í—Å–µ –ø–æ–∑–∏—Ü–∏–∏ –≤ –º—Å, —à–∞–≥ - —á–µ—Ç–≤–µ—Ä—Ç—å, 7,5 –≥—Ä–∞–¥.
  int microsecond[24] = {2359, 1710, 1658, 1600, 1548, 1490, 1433, 1375, 1321, 1267, 1202, 1151, 1092, 1039, 973, 927, 873, 818, 764, 710, 661, 611, 556, 500}; // –≤—Å–µ –ø–æ–∑–∏—Ü–∏–∏ –≤ –º—Å, —à–∞–≥ - —á–µ—Ç–≤–µ—Ä—Ç—å, 7,5 –≥—Ä–∞–¥.

  if (state > 21) state = 21;                         // –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è —Å–≤–µ—Ä—Ö—É
  if (state < 1) state = 1;                           // –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è —Å–Ω–∏–∑—É

  rotation_dif = state - rotation_old;                // –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
  if (rotation_dif != 0) count_ms_Rotation = millis();// –°–±—Ä–æ—Å —Å—á–µ—Ç—á–∏–∫–∞ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏
  rotation_old = state;                               // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–ª–æ–∂–µ–Ω–∏—è
  
  EEPROM.begin(512);                                  // –°–æ—Ö—Ä–∞–Ω—è–µ–µ–º –≤ EEPROM –ø–æ–ª–æ–∂–µ–Ω–∏–µ
  EEPROM.put(0, state);                               //
  EEPROM.end();
  
  myServo.writeMicroseconds(microsecond[state]);      // –ü–æ–≤–æ—Ä–∞—á–∏–≤–∞–µ–º Servo –Ω–∞ –Ω—É–∂–Ω—ã–π —É–≥–æ–ª
  delay (500);                                        // –ó–∞–¥–µ—Ä–∂–∫–∞
  digitalWrite(servoVcc, HIGH);                       // –ü–æ–¥–∞—á–∞ –ø–∏—Ç–∞–Ω–∏—è –Ω–∞ Servo
  ESP.wdtFeed();                                      // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç–æ—Ä–æ–∂–µ–≤–æ–π —Ç–∞–π–º–µ—Ä
  delay (6000);                                       // –ó–∞–¥–µ—Ä–∂–∫–∞ 6 —Å–µ–∫.
  ESP.wdtFeed();                                      // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç–æ—Ä–æ–∂–µ–≤–æ–π —Ç–∞–π–º–µ—Ä
  digitalWrite(servoVcc, LOW);                        // –°–Ω—è—Ç–∏–µ –ø–∏—Ç–∞–Ω–∏—è —Å Servo

  return_position_Sit630 = state / 4.0 + 0.75;        // –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –ø–æ–ª–æ–∂–µ–Ω–∏—è –≤ –¥–µ—Å—è—Ç–∏—á–Ω–æ–µ —á–∏—Å–ª–æ
  ifttt.triggerEvent(EVENT_NAME_2, String(return_position_Sit630), control_string); // –ü—É–±–ª–∏–∫–∞—Ü–∏—è –ø–æ–ª–æ–∂–µ–Ω–∏—è –∏ —Ä–µ–∂–∏–º–∞ –≤ –∫–æ—Ç–æ—Ä–æ–º –æ–Ω–æ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å –≤ —Å–µ—Ä–≤–∏—Å–µ IFTT –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ–ø–æ–≤–µ—â–µ–Ω–∏—è –Ω–∞ —Ç–µ–ª–µ—Ñ–æ–Ω
  control_string = " üñê";                             // –°—Ç—Ä–æ–∫–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ–ª–æ–∂–µ–Ω–∏—è –±–µ–∑ —É—á–∞—Å—Ç–∏—è —Ä–µ–≥—É–ª—è—Ç–æ—Ä–∞ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã
}


// –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —É—Å–ª–æ–≤–∏–π –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ä–µ–≥—É–ª–∏—Ä–æ–≤–∫–∏ –º–æ—â–Ω–æ—Å—Ç–∏ –∫–æ—Ç–ª–∞
int Situation ()
{
if      ((tem_dif > 0.1 && tem_small_trend >= 0.02) || (tem_dif > 0.25 && tem_small_trend >= 0) || (prognos > tem_zad + 1.0 && tem_small_trend >= 0)) return -1;
else if ((tem_dif < -0.1 && tem_small_trend <= -0.02) || (tem_dif < -0.25 && tem_small_trend <= 0) || (prognos < tem_zad - 1.0 && tem_small_trend <= 0)) return 1;
else return 0;
}



// –§—É–Ω–∫—Ü–∏—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –≤ —Å—Ç—Ä–æ–∫—É —Å –¥–≤–æ–µ—Ç–æ—á–∏–µ–º
// –î–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥ –≤ —á—á:–º–º:—Å–µ–∫
String Hour_display (long time_msec)
{
  int hour, minute, second;
  String st_hour, st_minute, st_second;

  hour = time_msec / 3600000;
  minute = (time_msec % 3600000) / 60000;
  second = ((time_msec % 3600000) % 60000) / 1000;

  if (hour >= 10 && hour <= 99) st_hour = String (hour) + ":"; else if (hour > 0 && hour <= 9) st_hour = "0" + String (hour) + ":"; else st_hour = String ("");
  if (minute >= 10) st_minute = String (minute); else st_minute = "0" + String (minute);
  if (second >= 10) st_second = String (second); else st_second = "0" + String (second);

  return st_hour + st_minute + ":" + st_second;
}
